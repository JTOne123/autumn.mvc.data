//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rsql.g by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Autumn.Data.Rest.Queries {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RsqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, LETTER=13, DIGIT=14, NUMBER=15, DATE=16, 
		ALPHA=17, ANY=18;
	public const int
		RULE_eval = 0, RULE_or = 1, RULE_and = 2, RULE_constraint = 3, RULE_group = 4, 
		RULE_comparison = 5, RULE_comparator = 6, RULE_comp_fiql = 7, RULE_comp_alt = 8, 
		RULE_reserved = 9, RULE_unreserved = 10, RULE_escaped = 11, RULE_single_quote = 12, 
		RULE_arguments = 13, RULE_value = 14, RULE_selector = 15;
	public static readonly string[] ruleNames = {
		"eval", "or", "and", "constraint", "group", "comparison", "comparator", 
		"comp_fiql", "comp_alt", "reserved", "unreserved", "escaped", "single_quote", 
		"arguments", "value", "selector"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "';'", "'('", "')'", "'='", "'-'", "'>'", "'<'", "'''", "'~'", 
		"' '", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "LETTER", "DIGIT", "NUMBER", "DATE", "ALPHA", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rsql.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RsqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public RsqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class EvalContext : ParserRuleContext {
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 0, RULE_eval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrContext : ParserRuleContext {
		public AndContext[] and() {
			return GetRuleContexts<AndContext>();
		}
		public AndContext and(int i) {
			return GetRuleContext<AndContext>(i);
		}
		public OrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrContext or() {
		OrContext _localctx = new OrContext(Context, State);
		EnterRule(_localctx, 2, RULE_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; and();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 35; Match(T__0);
				State = 36; and();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		public ConstraintContext[] constraint() {
			return GetRuleContexts<ConstraintContext>();
		}
		public ConstraintContext constraint(int i) {
			return GetRuleContext<ConstraintContext>(i);
		}
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 4, RULE_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; constraint();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 43; Match(T__1);
				State = 44; constraint();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 6, RULE_constraint);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; group();
				}
				break;
			case T__5:
			case T__11:
			case LETTER:
			case DIGIT:
			case NUMBER:
			case DATE:
			case ALPHA:
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 8, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(T__2);
			State = 55; or();
			State = 56; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 10, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; selector();
			State = 59; comparator();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__8) | (1L << NUMBER) | (1L << DATE))) != 0)) {
				{
				State = 60; arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		public Comp_fiqlContext comp_fiql() {
			return GetRuleContext<Comp_fiqlContext>(0);
		}
		public Comp_altContext comp_alt() {
			return GetRuleContext<Comp_altContext>(0);
		}
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_comparator);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; comp_fiql();
				}
				break;
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; comp_alt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_fiqlContext : ParserRuleContext {
		public ITerminalNode[] ALPHA() { return GetTokens(RsqlParser.ALPHA); }
		public ITerminalNode ALPHA(int i) {
			return GetToken(RsqlParser.ALPHA, i);
		}
		public Comp_fiqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_fiql; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterComp_fiql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitComp_fiql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_fiql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_fiqlContext comp_fiql() {
		Comp_fiqlContext _localctx = new Comp_fiqlContext(Context, State);
		EnterRule(_localctx, 14, RULE_comp_fiql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(T__4);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALPHA) {
				{
				State = 68; Match(ALPHA);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 69; Match(T__5);
					State = 70; Match(ALPHA);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 78; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_altContext : ParserRuleContext {
		public Comp_altContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_alt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterComp_alt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitComp_alt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_alt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_altContext comp_alt() {
		Comp_altContext _localctx = new Comp_altContext(Context, State);
		EnterRule(_localctx, 16, RULE_comp_alt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 81; Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 18, RULE_reserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnreservedContext : ParserRuleContext {
		public UnreservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unreserved; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterUnreserved(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitUnreserved(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnreserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnreservedContext unreserved() {
		UnreservedContext _localctx = new UnreservedContext(Context, State);
		EnterRule(_localctx, 20, RULE_unreserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedContext : ParserRuleContext {
		public EscapedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escaped; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterEscaped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitEscaped(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscaped(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedContext escaped() {
		EscapedContext _localctx = new EscapedContext(Context, State);
		EnterRule(_localctx, 22, RULE_escaped);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(T__11);
			State = 89;
			_la = TokenStream.LA(1);
			if ( _la <= 0 || (_la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_quoteContext : ParserRuleContext {
		public Single_quoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_quote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterSingle_quote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitSingle_quote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_quote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_quoteContext single_quote() {
		Single_quoteContext _localctx = new Single_quoteContext(Context, State);
		EnterRule(_localctx, 24, RULE_single_quote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(T__8);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << LETTER) | (1L << DIGIT) | (1L << NUMBER) | (1L << DATE) | (1L << ALPHA) | (1L << ANY))) != 0)) {
				{
				{
				State = 92;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__8) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 26, RULE_arguments);
		int _la;
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; Match(T__2);
				State = 101; value();
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 102; Match(T__0);
					State = 103; value();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 109; Match(T__3);
				}
				break;
			case T__8:
			case NUMBER:
			case DATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(RsqlParser.DATE, 0); }
		public ITerminalNode NUMBER() { return GetToken(RsqlParser.NUMBER, 0); }
		public Single_quoteContext single_quote() {
			return GetRuleContext<Single_quoteContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_value);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(DATE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; Match(NUMBER);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; single_quote();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public UnreservedContext[] unreserved() {
			return GetRuleContexts<UnreservedContext>();
		}
		public UnreservedContext unreserved(int i) {
			return GetRuleContext<UnreservedContext>(i);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRsqlListener typedListener = listener as IRsqlListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRsqlVisitor<TResult> typedVisitor = visitor as IRsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 30, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 119; unreserved();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__11) | (1L << LETTER) | (1L << DIGIT) | (1L << NUMBER) | (1L << DATE) | (1L << ALPHA) | (1L << ANY))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x14");
		sb.Append("\x7F\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\x3\x3\a\x3(\n\x3\f\x3\xE\x3+\v\x3\x3\x4\x3\x4");
		sb.Append("\x3\x4\a\x4\x30\n\x4\f\x4\xE\x4\x33\v\x4\x3\x5\x3\x5\x5\x5\x37");
		sb.Append("\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\a@\n\a\x3\b");
		sb.Append("\x3\b\x5\b\x44\n\b\x3\t\x3\t\x3\t\x3\t\a\tJ\n\t\f\t\xE\tM\v");
		sb.Append("\t\x5\tO\n\t\x3\t\x3\t\x3\n\x3\n\x5\nU\n\n\x3\v\x3\v\x3\f\x3");
		sb.Append("\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\a\xE`\n\xE\f\xE\xE\xE\x63\v\xE");
		sb.Append("\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xFk\n\xF\f\xF\xE\xFn");
		sb.Append("\v\xF\x3\xF\x3\xF\x3\xF\x5\xFs\n\xF\x3\x10\x3\x10\x3\x10\x5");
		sb.Append("\x10x\n\x10\x3\x11\x6\x11{\n\x11\r\x11\xE\x11|\x3\x11\x2\x2");
		sb.Append("\x12\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \x2\x6");
		sb.Append("\x3\x2\t\n\x4\x2\x3\a\t\r\x3\x2\xE\xE\x3\x2\v\v|\x2\"\x3\x2");
		sb.Append("\x2\x2\x4$\x3\x2\x2\x2\x6,\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\n\x38");
		sb.Append("\x3\x2\x2\x2\f<\x3\x2\x2\x2\xE\x43\x3\x2\x2\x2\x10\x45\x3\x2");
		sb.Append("\x2\x2\x12R\x3\x2\x2\x2\x14V\x3\x2\x2\x2\x16X\x3\x2\x2\x2\x18");
		sb.Append("Z\x3\x2\x2\x2\x1A]\x3\x2\x2\x2\x1Cr\x3\x2\x2\x2\x1Ew\x3\x2\x2");
		sb.Append("\x2 z\x3\x2\x2\x2\"#\x5\x4\x3\x2#\x3\x3\x2\x2\x2$)\x5\x6\x4");
		sb.Append("\x2%&\a\x3\x2\x2&(\x5\x6\x4\x2\'%\x3\x2\x2\x2(+\x3\x2\x2\x2");
		sb.Append(")\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\x5\x3\x2\x2\x2+)\x3\x2\x2\x2");
		sb.Append(",\x31\x5\b\x5\x2-.\a\x4\x2\x2.\x30\x5\b\x5\x2/-\x3\x2\x2\x2");
		sb.Append("\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32");
		sb.Append("\a\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x37\x5\n\x6\x2\x35\x37");
		sb.Append("\x5\f\a\x2\x36\x34\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\t\x3");
		sb.Append("\x2\x2\x2\x38\x39\a\x5\x2\x2\x39:\x5\x4\x3\x2:;\a\x6\x2\x2;");
		sb.Append("\v\x3\x2\x2\x2<=\x5 \x11\x2=?\x5\xE\b\x2>@\x5\x1C\xF\x2?>\x3");
		sb.Append("\x2\x2\x2?@\x3\x2\x2\x2@\r\x3\x2\x2\x2\x41\x44\x5\x10\t\x2\x42");
		sb.Append("\x44\x5\x12\n\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44");
		sb.Append("\xF\x3\x2\x2\x2\x45N\a\a\x2\x2\x46K\a\x13\x2\x2GH\a\b\x2\x2");
		sb.Append("HJ\a\x13\x2\x2IG\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3");
		sb.Append("\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2N\x46\x3\x2\x2\x2NO\x3");
		sb.Append("\x2\x2\x2OP\x3\x2\x2\x2PQ\a\a\x2\x2Q\x11\x3\x2\x2\x2RT\t\x2");
		sb.Append("\x2\x2SU\a\a\x2\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2U\x13\x3\x2\x2");
		sb.Append("\x2VW\t\x3\x2\x2W\x15\x3\x2\x2\x2XY\n\x3\x2\x2Y\x17\x3\x2\x2");
		sb.Append("\x2Z[\a\xE\x2\x2[\\\n\x4\x2\x2\\\x19\x3\x2\x2\x2]\x61\a\v\x2");
		sb.Append("\x2^`\n\x5\x2\x2_^\x3\x2\x2\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2");
		sb.Append("\x2\x61\x62\x3\x2\x2\x2\x62\x64\x3\x2\x2\x2\x63\x61\x3\x2\x2");
		sb.Append("\x2\x64\x65\a\v\x2\x2\x65\x1B\x3\x2\x2\x2\x66g\a\x5\x2\x2gl");
		sb.Append("\x5\x1E\x10\x2hi\a\x3\x2\x2ik\x5\x1E\x10\x2jh\x3\x2\x2\x2kn");
		sb.Append("\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2nl\x3");
		sb.Append("\x2\x2\x2op\a\x6\x2\x2ps\x3\x2\x2\x2qs\x5\x1E\x10\x2r\x66\x3");
		sb.Append("\x2\x2\x2rq\x3\x2\x2\x2s\x1D\x3\x2\x2\x2tx\a\x12\x2\x2ux\a\x11");
		sb.Append("\x2\x2vx\x5\x1A\xE\x2wt\x3\x2\x2\x2wu\x3\x2\x2\x2wv\x3\x2\x2");
		sb.Append("\x2x\x1F\x3\x2\x2\x2y{\x5\x16\f\x2zy\x3\x2\x2\x2{|\x3\x2\x2");
		sb.Append("\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}!\x3\x2\x2\x2\xF)\x31\x36?\x43");
		sb.Append("KNT\x61lrw|");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace Autumn.Data.Rest.Queries
