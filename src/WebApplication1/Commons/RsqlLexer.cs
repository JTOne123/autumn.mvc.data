//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rsql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace WebApplication1.Commons {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RsqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, LETTER=13, DIGIT=14, NUMBER=15, DATE=16, 
		ALPHA=17, ALPHANUM=18, ANY=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "LETTER", "DIGIT", "NUMBER", "DATE", "ALPHA", 
		"ALPHANUM", "ANY"
	};


	public RsqlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "';'", "'('", "')'", "'='", "'-'", "'>'", "'<'", "'''", "'~'", 
		"' '", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "LETTER", "DIGIT", "NUMBER", "DATE", "ALPHA", "ALPHANUM", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rsql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RsqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x15");
		sb.Append("\x7F\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3");
		sb.Append("\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE");
		sb.Append("\x3\xF\x3\xF\x3\x10\x5\x10G\n\x10\x3\x10\x6\x10J\n\x10\r\x10");
		sb.Append("\xE\x10K\x3\x10\x3\x10\x6\x10P\n\x10\r\x10\xE\x10Q\x5\x10T\n");
		sb.Append("\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x5\x11o\n\x11\x5\x11q\n\x11\x3\x12\x6\x12t\n\x12\r\x12\xE\x12");
		sb.Append("u\x3\x13\x3\x13\x6\x13z\n\x13\r\x13\xE\x13{\x3\x14\x3\x14\x2");
		sb.Append("\x2\x15\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f");
		sb.Append("\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15\x3");
		sb.Append("\x2\x4\x4\x2\x43\\\x63|\x4\x2--//\x87\x2\x3\x3\x2\x2\x2\x2\x5");
		sb.Append("\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2");
		sb.Append("\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2");
		sb.Append("\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19");
		sb.Append("\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3");
		sb.Append("\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2");
		sb.Append("\'\x3\x2\x2\x2\x3)\x3\x2\x2\x2\x5+\x3\x2\x2\x2\a-\x3\x2\x2\x2");
		sb.Append("\t/\x3\x2\x2\x2\v\x31\x3\x2\x2\x2\r\x33\x3\x2\x2\x2\xF\x35\x3");
		sb.Append("\x2\x2\x2\x11\x37\x3\x2\x2\x2\x13\x39\x3\x2\x2\x2\x15;\x3\x2");
		sb.Append("\x2\x2\x17=\x3\x2\x2\x2\x19?\x3\x2\x2\x2\x1B\x41\x3\x2\x2\x2");
		sb.Append("\x1D\x43\x3\x2\x2\x2\x1F\x46\x3\x2\x2\x2!U\x3\x2\x2\x2#s\x3");
		sb.Append("\x2\x2\x2%y\x3\x2\x2\x2\'}\x3\x2\x2\x2)*\a.\x2\x2*\x4\x3\x2");
		sb.Append("\x2\x2+,\a=\x2\x2,\x6\x3\x2\x2\x2-.\a*\x2\x2.\b\x3\x2\x2\x2");
		sb.Append("/\x30\a+\x2\x2\x30\n\x3\x2\x2\x2\x31\x32\a?\x2\x2\x32\f\x3\x2");
		sb.Append("\x2\x2\x33\x34\a/\x2\x2\x34\xE\x3\x2\x2\x2\x35\x36\a@\x2\x2");
		sb.Append("\x36\x10\x3\x2\x2\x2\x37\x38\a>\x2\x2\x38\x12\x3\x2\x2\x2\x39");
		sb.Append(":\a)\x2\x2:\x14\x3\x2\x2\x2;<\a\x80\x2\x2<\x16\x3\x2\x2\x2=");
		sb.Append(">\a\"\x2\x2>\x18\x3\x2\x2\x2?@\a^\x2\x2@\x1A\x3\x2\x2\x2\x41");
		sb.Append("\x42\t\x2\x2\x2\x42\x1C\x3\x2\x2\x2\x43\x44\x4\x32;\x2\x44\x1E");
		sb.Append("\x3\x2\x2\x2\x45G\t\x3\x2\x2\x46\x45\x3\x2\x2\x2\x46G\x3\x2");
		sb.Append("\x2\x2GI\x3\x2\x2\x2HJ\x4\x32;\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2");
		sb.Append("KI\x3\x2\x2\x2KL\x3\x2\x2\x2LS\x3\x2\x2\x2MO\a\x30\x2\x2NP\x4");
		sb.Append("\x32;\x2ON\x3\x2\x2\x2PQ\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2");
		sb.Append("\x2RT\x3\x2\x2\x2SM\x3\x2\x2\x2ST\x3\x2\x2\x2T \x3\x2\x2\x2");
		sb.Append("UV\x4\x32;\x2VW\x4\x32;\x2WX\x4\x32;\x2XY\x4\x32;\x2YZ\a/\x2");
		sb.Append("\x2Z[\x4\x32;\x2[\\\x4\x32;\x2\\]\a/\x2\x2]^\x4\x32;\x2^p\x4");
		sb.Append("\x32;\x2_`\aV\x2\x2`\x61\x4\x32;\x2\x61\x62\x4\x32;\x2\x62\x63");
		sb.Append("\a<\x2\x2\x63\x64\x4\x32;\x2\x64\x65\x4\x32;\x2\x65\x66\a<\x2");
		sb.Append("\x2\x66g\x4\x32;\x2gn\x4\x32;\x2hi\t\x3\x2\x2ij\x4\x32;\x2j");
		sb.Append("k\x4\x32;\x2kl\a<\x2\x2lm\x4\x32;\x2mo\x4\x32;\x2nh\x3\x2\x2");
		sb.Append("\x2no\x3\x2\x2\x2oq\x3\x2\x2\x2p_\x3\x2\x2\x2pq\x3\x2\x2\x2");
		sb.Append("q\"\x3\x2\x2\x2rt\x5\x1B\xE\x2sr\x3\x2\x2\x2tu\x3\x2\x2\x2u");
		sb.Append("s\x3\x2\x2\x2uv\x3\x2\x2\x2v$\x3\x2\x2\x2wz\x5\x1B\xE\x2xz\x5");
		sb.Append("\x1D\xF\x2yw\x3\x2\x2\x2yx\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2");
		sb.Append("\x2\x2{|\x3\x2\x2\x2|&\x3\x2\x2\x2}~\v\x2\x2\x2~(\x3\x2\x2\x2");
		sb.Append("\f\x2\x46KQSnpuy{\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace WebApplication1.Commons
