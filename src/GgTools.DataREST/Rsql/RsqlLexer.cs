//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Rsql.g by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GgTools.DataREST.Rsql {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
public partial class RsqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, LETTER=13, DIGIT=14, NUMBER=15, DATE=16, 
		ALPHA=17, ANY=18;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "LETTER", "DIGIT", "NUMBER", "DATE", "ALPHA", 
		"ANY"
	};


	public RsqlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "';'", "'('", "')'", "'='", "'-'", "'>'", "'<'", "'''", "'~'", 
		"' '", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "LETTER", "DIGIT", "NUMBER", "DATE", "ALPHA", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rsql.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RsqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x14");
		sb.Append("w\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3");
		sb.Append("\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x5");
		sb.Append("\x10\x45\n\x10\x3\x10\x6\x10H\n\x10\r\x10\xE\x10I\x3\x10\x3");
		sb.Append("\x10\x6\x10N\n\x10\r\x10\xE\x10O\x5\x10R\n\x10\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11m\n\x11\x5");
		sb.Append("\x11o\n\x11\x3\x12\x6\x12r\n\x12\r\x12\xE\x12s\x3\x13\x3\x13");
		sb.Append("\x2\x2\x14\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15");
		sb.Append("\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\x3\x2");
		sb.Append("\x4\x4\x2\x43\\\x63|\x4\x2--//}\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2");
		sb.Append("\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2");
		sb.Append("\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x3\'\x3");
		sb.Append("\x2\x2\x2\x5)\x3\x2\x2\x2\a+\x3\x2\x2\x2\t-\x3\x2\x2\x2\v/\x3");
		sb.Append("\x2\x2\x2\r\x31\x3\x2\x2\x2\xF\x33\x3\x2\x2\x2\x11\x35\x3\x2");
		sb.Append("\x2\x2\x13\x37\x3\x2\x2\x2\x15\x39\x3\x2\x2\x2\x17;\x3\x2\x2");
		sb.Append("\x2\x19=\x3\x2\x2\x2\x1B?\x3\x2\x2\x2\x1D\x41\x3\x2\x2\x2\x1F");
		sb.Append("\x44\x3\x2\x2\x2!S\x3\x2\x2\x2#q\x3\x2\x2\x2%u\x3\x2\x2\x2\'");
		sb.Append("(\a.\x2\x2(\x4\x3\x2\x2\x2)*\a=\x2\x2*\x6\x3\x2\x2\x2+,\a*\x2");
		sb.Append("\x2,\b\x3\x2\x2\x2-.\a+\x2\x2.\n\x3\x2\x2\x2/\x30\a?\x2\x2\x30");
		sb.Append("\f\x3\x2\x2\x2\x31\x32\a/\x2\x2\x32\xE\x3\x2\x2\x2\x33\x34\a");
		sb.Append("@\x2\x2\x34\x10\x3\x2\x2\x2\x35\x36\a>\x2\x2\x36\x12\x3\x2\x2");
		sb.Append("\x2\x37\x38\a)\x2\x2\x38\x14\x3\x2\x2\x2\x39:\a\x80\x2\x2:\x16");
		sb.Append("\x3\x2\x2\x2;<\a\"\x2\x2<\x18\x3\x2\x2\x2=>\a^\x2\x2>\x1A\x3");
		sb.Append("\x2\x2\x2?@\t\x2\x2\x2@\x1C\x3\x2\x2\x2\x41\x42\x4\x32;\x2\x42");
		sb.Append("\x1E\x3\x2\x2\x2\x43\x45\t\x3\x2\x2\x44\x43\x3\x2\x2\x2\x44");
		sb.Append("\x45\x3\x2\x2\x2\x45G\x3\x2\x2\x2\x46H\x4\x32;\x2G\x46\x3\x2");
		sb.Append("\x2\x2HI\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JQ\x3\x2\x2");
		sb.Append("\x2KM\a\x30\x2\x2LN\x4\x32;\x2ML\x3\x2\x2\x2NO\x3\x2\x2\x2O");
		sb.Append("M\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2QK\x3\x2\x2\x2QR\x3");
		sb.Append("\x2\x2\x2R \x3\x2\x2\x2ST\x4\x32;\x2TU\x4\x32;\x2UV\x4\x32;");
		sb.Append("\x2VW\x4\x32;\x2WX\a/\x2\x2XY\x4\x32;\x2YZ\x4\x32;\x2Z[\a/\x2");
		sb.Append("\x2[\\\x4\x32;\x2\\n\x4\x32;\x2]^\aV\x2\x2^_\x4\x32;\x2_`\x4");
		sb.Append("\x32;\x2`\x61\a<\x2\x2\x61\x62\x4\x32;\x2\x62\x63\x4\x32;\x2");
		sb.Append("\x63\x64\a<\x2\x2\x64\x65\x4\x32;\x2\x65l\x4\x32;\x2\x66g\t");
		sb.Append("\x3\x2\x2gh\x4\x32;\x2hi\x4\x32;\x2ij\a<\x2\x2jk\x4\x32;\x2");
		sb.Append("km\x4\x32;\x2l\x66\x3\x2\x2\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2n");
		sb.Append("]\x3\x2\x2\x2no\x3\x2\x2\x2o\"\x3\x2\x2\x2pr\x5\x1B\xE\x2qp");
		sb.Append("\x3\x2\x2\x2rs\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2t$\x3");
		sb.Append("\x2\x2\x2uv\v\x2\x2\x2v&\x3\x2\x2\x2\n\x2\x44IOQlns\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GgTools.DataREST.Rsql
